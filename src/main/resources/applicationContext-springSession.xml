<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 打开注解方式 -->
    <context:annotation-config />

    <!--可以將redis配置写入配置文件中-->
    <context:property-placeholder ignore-unresolvable="true" location="mall.properties"/>

    <!--必须声明-->
    <bean id="redisHttpSessionConfiguration" class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
        <property name="maxInactiveIntervalInSeconds" value="1800"/>
    </bean>

    <!--创建一个Spring Bean的名称springSessionRepositoryFilter实现过滤器。
   筛选器负责将HttpSession实现替换为Spring会话支持。在这个实例中，Spring会话得到了Redis的支持。-->
    <!--单机Redis-->
    <!--<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis1.host}"/>
        <property name="port" value="${redis1.port}"/>
        <property name="password" value="${redis1.pass}"/>
        <property name="database" value="${redis1.database}"/>
        <property name="poolConfig" ref="jedisPoolConfig" />
    </bean>-->

    <!--集群Redis-->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <!-- Redis Sentinel -->
        <constructor-arg index="0" ref="redisSentinelConfig"/>
        <!--配置Redis连接池 ，可以不配置，使用默认就行！-->
        <constructor-arg index="1" ref="jedisPoolConfig" />
    </bean>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--最大连接数, 默认8个-->
        <property name="maxTotal" value="${redis.maxTotal}"/>

        <!--最大空闲连接数, 默认8-->
        <property name="maxIdle" value="${redis.maxIdle}"/>

        <!--最小空闲连接数, 默认0-->
        <property name="minIdle" value="${redis.minIdle}"/>

        <!--在获取连接的时候检查有效性, 默认false-->
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>

        <!--在空闲时检查有效性, 默认false, 新版jedis 不支持这个参数了-->
        <property name="testOnReturn" value="${redis.testOnReturn}"/>

        <!--获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1-->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>

        <!--连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true-->
        <property name="blockWhenExhausted" value="${redis.blockWhenExhausted}"/>

        <!--设置的逐出策略类名, 默认DefaultEvictionPolicy(当连接超过最大空闲时间,或连接数超过最大空闲连接数)-->
        <property name="evictionPolicyClassName" value="${redis.evictionPolicyClassName}"/>
    </bean>

    <!-- 哨兵模式配置 -->
    <bean id="redisSentinelConfig" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <property name="password" value="${redis.sentinel.password}"/>
        <property name="master">
            <bean class="org.springframework.data.redis.connection.RedisNode">
                <property name="name" value="mymaster"/>
            </bean>
        </property>
        <property name="sentinels">
            <set>
                <bean  id="sentinel1" class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${redis.sentinel1.host}"/>
                    <constructor-arg name="port" value="${redis.sentinel1.port}"/>
                </bean>
                <bean  id="sentinel2" class="org.springframework.data.redis.connection.RedisNode" >
                    <constructor-arg name="host" value="${redis.sentinel2.host}"/>
                    <constructor-arg name="port" value="${redis.sentinel2.port}"/>
                </bean>
                <bean  id="sentinel3" class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${redis.sentinel3.host}"/>
                    <constructor-arg name="port" value="${redis.sentinel3.port}"/>
                </bean>
            </set>
        </property>
    </bean>

    <!-- 集群模式配置 -->
    <bean id="redisClusterConfig" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <property name="maxRedirects" value="${redis.cluster.maxRedirects}"/>
        <property name="password" value="${redis.cluster.password}"/>
        <property name="clusterNodes">
            <set>
                <bean id="cluster0" class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${redis.cluster0.host}" />
                    <constructor-arg name="port" value="${redis.cluster0.port}"/>
                </bean>
                <bean id="cluster1" class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${redis.cluster1.host}"/>
                    <constructor-arg name="port" value="${redis.cluster1.port}"/>
                </bean>
                <bean id="cluster2" class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${redis.cluster2.host}"/>
                    <constructor-arg name="port" value="${redis.cluster2.port}"/>
                </bean>
                <bean id="cluster3" class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${redis.cluster3.host}"/>
                    <constructor-arg name="port" value="${redis.cluster3.port}"/>
                </bean>
                <bean id="cluster4" class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${redis.cluster4.host}"/>
                    <constructor-arg name="port" value="${redis.cluster4.port}"/>
                </bean>
                <bean id="cluster5" class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${redis.cluster5.host}"/>
                    <constructor-arg name="port" value="${redis.cluster5.port}"/>
                </bean>
            </set>
        </property>
    </bean>


</beans>